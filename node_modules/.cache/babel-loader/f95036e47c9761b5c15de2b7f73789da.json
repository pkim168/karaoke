{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Adapter = void 0;\n\nconst events_1 = require(\"events\");\n\nclass Adapter extends events_1.EventEmitter {\n  /**\n   * In-memory adapter constructor.\n   *\n   * @param {Namespace} nsp\n   */\n  constructor(nsp) {\n    super();\n    this.nsp = nsp;\n    this.rooms = new Map();\n    this.sids = new Map();\n    this.encoder = nsp.server.encoder;\n  }\n  /**\n   * To be overridden\n   */\n\n\n  init() {}\n  /**\n   * To be overridden\n   */\n\n\n  close() {}\n  /**\n   * Adds a socket to a list of room.\n   *\n   * @param {SocketId}  id      the socket id\n   * @param {Set<Room>} rooms   a set of rooms\n   * @public\n   */\n\n\n  addAll(id, rooms) {\n    if (!this.sids.has(id)) {\n      this.sids.set(id, new Set());\n    }\n\n    for (const room of rooms) {\n      this.sids.get(id).add(room);\n\n      if (!this.rooms.has(room)) {\n        this.rooms.set(room, new Set());\n        this.emit(\"create-room\", room);\n      }\n\n      if (!this.rooms.get(room).has(id)) {\n        this.rooms.get(room).add(id);\n        this.emit(\"join-room\", room, id);\n      }\n    }\n  }\n  /**\n   * Removes a socket from a room.\n   *\n   * @param {SocketId} id     the socket id\n   * @param {Room}     room   the room name\n   */\n\n\n  del(id, room) {\n    if (this.sids.has(id)) {\n      this.sids.get(id).delete(room);\n    }\n\n    this._del(room, id);\n  }\n\n  _del(room, id) {\n    if (this.rooms.has(room)) {\n      const deleted = this.rooms.get(room).delete(id);\n\n      if (deleted) {\n        this.emit(\"leave-room\", room, id);\n      }\n\n      if (this.rooms.get(room).size === 0) {\n        this.rooms.delete(room);\n        this.emit(\"delete-room\", room);\n      }\n    }\n  }\n  /**\n   * Removes a socket from all rooms it's joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  delAll(id) {\n    if (!this.sids.has(id)) {\n      return;\n    }\n\n    for (const room of this.sids.get(id)) {\n      this._del(room, id);\n    }\n\n    this.sids.delete(id);\n  }\n  /**\n   * Broadcasts a packet.\n   *\n   * Options:\n   *  - `flags` {Object} flags for this packet\n   *  - `except` {Array} sids that should be excluded\n   *  - `rooms` {Array} list of rooms to broadcast to\n   *\n   * @param {Object} packet   the packet object\n   * @param {Object} opts     the options\n   * @public\n   */\n\n\n  broadcast(packet, opts) {\n    const rooms = opts.rooms;\n    const except = opts.except || new Set();\n    const flags = opts.flags || {};\n    const packetOpts = {\n      preEncoded: true,\n      volatile: flags.volatile,\n      compress: flags.compress\n    };\n    const ids = new Set();\n    packet.nsp = this.nsp.name;\n    const encodedPackets = this.encoder.encode(packet);\n\n    if (rooms.size) {\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (ids.has(id) || except.has(id)) continue;\n          const socket = this.nsp.sockets.get(id);\n\n          if (socket) {\n            socket.packet(encodedPackets, packetOpts);\n            ids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (except.has(id)) continue;\n        const socket = this.nsp.sockets.get(id);\n        if (socket) socket.packet(encodedPackets, packetOpts);\n      }\n    }\n  }\n  /**\n   * Gets a list of sockets by sid.\n   *\n   * @param {Set<Room>} rooms   the explicit set of rooms to check.\n   */\n\n\n  sockets(rooms) {\n    const sids = new Set();\n\n    if (rooms.size) {\n      for (const room of rooms) {\n        if (!this.rooms.has(room)) continue;\n\n        for (const id of this.rooms.get(room)) {\n          if (this.nsp.sockets.has(id)) {\n            sids.add(id);\n          }\n        }\n      }\n    } else {\n      for (const [id] of this.sids) {\n        if (this.nsp.sockets.has(id)) sids.add(id);\n      }\n    }\n\n    return Promise.resolve(sids);\n  }\n  /**\n   * Gets the list of rooms a given socket has joined.\n   *\n   * @param {SocketId} id   the socket id\n   */\n\n\n  socketRooms(id) {\n    return this.sids.get(id);\n  }\n\n}\n\nexports.Adapter = Adapter;","map":{"version":3,"sources":["D:/Documents/GitHub/karaoke/node_modules/socket.io-adapter/dist/index.js"],"names":["Object","defineProperty","exports","value","Adapter","events_1","require","EventEmitter","constructor","nsp","rooms","Map","sids","encoder","server","init","close","addAll","id","has","set","Set","room","get","add","emit","del","delete","_del","deleted","size","delAll","broadcast","packet","opts","except","flags","packetOpts","preEncoded","volatile","compress","ids","name","encodedPackets","encode","socket","sockets","Promise","resolve","socketRooms"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AACA,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMF,OAAN,SAAsBC,QAAQ,CAACE,YAA/B,CAA4C;AACxC;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb;AACA,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA,SAAKC,IAAL,GAAY,IAAID,GAAJ,EAAZ;AACA,SAAKE,OAAL,GAAeJ,GAAG,CAACK,MAAJ,CAAWD,OAA1B;AACH;AACD;AACJ;AACA;;;AACIE,EAAAA,IAAI,GAAG,CAAG;AACV;AACJ;AACA;;;AACIC,EAAAA,KAAK,GAAG,CAAG;AACX;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,EAAD,EAAKR,KAAL,EAAY;AACd,QAAI,CAAC,KAAKE,IAAL,CAAUO,GAAV,CAAcD,EAAd,CAAL,EAAwB;AACpB,WAAKN,IAAL,CAAUQ,GAAV,CAAcF,EAAd,EAAkB,IAAIG,GAAJ,EAAlB;AACH;;AACD,SAAK,MAAMC,IAAX,IAAmBZ,KAAnB,EAA0B;AACtB,WAAKE,IAAL,CAAUW,GAAV,CAAcL,EAAd,EAAkBM,GAAlB,CAAsBF,IAAtB;;AACA,UAAI,CAAC,KAAKZ,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAL,EAA2B;AACvB,aAAKZ,KAAL,CAAWU,GAAX,CAAeE,IAAf,EAAqB,IAAID,GAAJ,EAArB;AACA,aAAKI,IAAL,CAAU,aAAV,EAAyBH,IAAzB;AACH;;AACD,UAAI,CAAC,KAAKZ,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBH,GAArB,CAAyBD,EAAzB,CAAL,EAAmC;AAC/B,aAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBE,GAArB,CAAyBN,EAAzB;AACA,aAAKO,IAAL,CAAU,WAAV,EAAuBH,IAAvB,EAA6BJ,EAA7B;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIQ,EAAAA,GAAG,CAACR,EAAD,EAAKI,IAAL,EAAW;AACV,QAAI,KAAKV,IAAL,CAAUO,GAAV,CAAcD,EAAd,CAAJ,EAAuB;AACnB,WAAKN,IAAL,CAAUW,GAAV,CAAcL,EAAd,EAAkBS,MAAlB,CAAyBL,IAAzB;AACH;;AACD,SAAKM,IAAL,CAAUN,IAAV,EAAgBJ,EAAhB;AACH;;AACDU,EAAAA,IAAI,CAACN,IAAD,EAAOJ,EAAP,EAAW;AACX,QAAI,KAAKR,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAJ,EAA0B;AACtB,YAAMO,OAAO,GAAG,KAAKnB,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBK,MAArB,CAA4BT,EAA5B,CAAhB;;AACA,UAAIW,OAAJ,EAAa;AACT,aAAKJ,IAAL,CAAU,YAAV,EAAwBH,IAAxB,EAA8BJ,EAA9B;AACH;;AACD,UAAI,KAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,EAAqBQ,IAArB,KAA8B,CAAlC,EAAqC;AACjC,aAAKpB,KAAL,CAAWiB,MAAX,CAAkBL,IAAlB;AACA,aAAKG,IAAL,CAAU,aAAV,EAAyBH,IAAzB;AACH;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIS,EAAAA,MAAM,CAACb,EAAD,EAAK;AACP,QAAI,CAAC,KAAKN,IAAL,CAAUO,GAAV,CAAcD,EAAd,CAAL,EAAwB;AACpB;AACH;;AACD,SAAK,MAAMI,IAAX,IAAmB,KAAKV,IAAL,CAAUW,GAAV,CAAcL,EAAd,CAAnB,EAAsC;AAClC,WAAKU,IAAL,CAAUN,IAAV,EAAgBJ,EAAhB;AACH;;AACD,SAAKN,IAAL,CAAUe,MAAV,CAAiBT,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIc,EAAAA,SAAS,CAACC,MAAD,EAASC,IAAT,EAAe;AACpB,UAAMxB,KAAK,GAAGwB,IAAI,CAACxB,KAAnB;AACA,UAAMyB,MAAM,GAAGD,IAAI,CAACC,MAAL,IAAe,IAAId,GAAJ,EAA9B;AACA,UAAMe,KAAK,GAAGF,IAAI,CAACE,KAAL,IAAc,EAA5B;AACA,UAAMC,UAAU,GAAG;AACfC,MAAAA,UAAU,EAAE,IADG;AAEfC,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QAFD;AAGfC,MAAAA,QAAQ,EAAEJ,KAAK,CAACI;AAHD,KAAnB;AAKA,UAAMC,GAAG,GAAG,IAAIpB,GAAJ,EAAZ;AACAY,IAAAA,MAAM,CAACxB,GAAP,GAAa,KAAKA,GAAL,CAASiC,IAAtB;AACA,UAAMC,cAAc,GAAG,KAAK9B,OAAL,CAAa+B,MAAb,CAAoBX,MAApB,CAAvB;;AACA,QAAIvB,KAAK,CAACoB,IAAV,EAAgB;AACZ,WAAK,MAAMR,IAAX,IAAmBZ,KAAnB,EAA0B;AACtB,YAAI,CAAC,KAAKA,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAL,EACI;;AACJ,aAAK,MAAMJ,EAAX,IAAiB,KAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,CAAjB,EAAuC;AACnC,cAAImB,GAAG,CAACtB,GAAJ,CAAQD,EAAR,KAAeiB,MAAM,CAAChB,GAAP,CAAWD,EAAX,CAAnB,EACI;AACJ,gBAAM2B,MAAM,GAAG,KAAKpC,GAAL,CAASqC,OAAT,CAAiBvB,GAAjB,CAAqBL,EAArB,CAAf;;AACA,cAAI2B,MAAJ,EAAY;AACRA,YAAAA,MAAM,CAACZ,MAAP,CAAcU,cAAd,EAA8BN,UAA9B;AACAI,YAAAA,GAAG,CAACjB,GAAJ,CAAQN,EAAR;AACH;AACJ;AACJ;AACJ,KAdD,MAeK;AACD,WAAK,MAAM,CAACA,EAAD,CAAX,IAAmB,KAAKN,IAAxB,EAA8B;AAC1B,YAAIuB,MAAM,CAAChB,GAAP,CAAWD,EAAX,CAAJ,EACI;AACJ,cAAM2B,MAAM,GAAG,KAAKpC,GAAL,CAASqC,OAAT,CAAiBvB,GAAjB,CAAqBL,EAArB,CAAf;AACA,YAAI2B,MAAJ,EACIA,MAAM,CAACZ,MAAP,CAAcU,cAAd,EAA8BN,UAA9B;AACP;AACJ;AACJ;AACD;AACJ;AACA;AACA;AACA;;;AACIS,EAAAA,OAAO,CAACpC,KAAD,EAAQ;AACX,UAAME,IAAI,GAAG,IAAIS,GAAJ,EAAb;;AACA,QAAIX,KAAK,CAACoB,IAAV,EAAgB;AACZ,WAAK,MAAMR,IAAX,IAAmBZ,KAAnB,EAA0B;AACtB,YAAI,CAAC,KAAKA,KAAL,CAAWS,GAAX,CAAeG,IAAf,CAAL,EACI;;AACJ,aAAK,MAAMJ,EAAX,IAAiB,KAAKR,KAAL,CAAWa,GAAX,CAAeD,IAAf,CAAjB,EAAuC;AACnC,cAAI,KAAKb,GAAL,CAASqC,OAAT,CAAiB3B,GAAjB,CAAqBD,EAArB,CAAJ,EAA8B;AAC1BN,YAAAA,IAAI,CAACY,GAAL,CAASN,EAAT;AACH;AACJ;AACJ;AACJ,KAVD,MAWK;AACD,WAAK,MAAM,CAACA,EAAD,CAAX,IAAmB,KAAKN,IAAxB,EAA8B;AAC1B,YAAI,KAAKH,GAAL,CAASqC,OAAT,CAAiB3B,GAAjB,CAAqBD,EAArB,CAAJ,EACIN,IAAI,CAACY,GAAL,CAASN,EAAT;AACP;AACJ;;AACD,WAAO6B,OAAO,CAACC,OAAR,CAAgBpC,IAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIqC,EAAAA,WAAW,CAAC/B,EAAD,EAAK;AACZ,WAAO,KAAKN,IAAL,CAAUW,GAAV,CAAcL,EAAd,CAAP;AACH;;AApKuC;;AAsK5ChB,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Adapter = void 0;\nconst events_1 = require(\"events\");\nclass Adapter extends events_1.EventEmitter {\n    /**\n     * In-memory adapter constructor.\n     *\n     * @param {Namespace} nsp\n     */\n    constructor(nsp) {\n        super();\n        this.nsp = nsp;\n        this.rooms = new Map();\n        this.sids = new Map();\n        this.encoder = nsp.server.encoder;\n    }\n    /**\n     * To be overridden\n     */\n    init() { }\n    /**\n     * To be overridden\n     */\n    close() { }\n    /**\n     * Adds a socket to a list of room.\n     *\n     * @param {SocketId}  id      the socket id\n     * @param {Set<Room>} rooms   a set of rooms\n     * @public\n     */\n    addAll(id, rooms) {\n        if (!this.sids.has(id)) {\n            this.sids.set(id, new Set());\n        }\n        for (const room of rooms) {\n            this.sids.get(id).add(room);\n            if (!this.rooms.has(room)) {\n                this.rooms.set(room, new Set());\n                this.emit(\"create-room\", room);\n            }\n            if (!this.rooms.get(room).has(id)) {\n                this.rooms.get(room).add(id);\n                this.emit(\"join-room\", room, id);\n            }\n        }\n    }\n    /**\n     * Removes a socket from a room.\n     *\n     * @param {SocketId} id     the socket id\n     * @param {Room}     room   the room name\n     */\n    del(id, room) {\n        if (this.sids.has(id)) {\n            this.sids.get(id).delete(room);\n        }\n        this._del(room, id);\n    }\n    _del(room, id) {\n        if (this.rooms.has(room)) {\n            const deleted = this.rooms.get(room).delete(id);\n            if (deleted) {\n                this.emit(\"leave-room\", room, id);\n            }\n            if (this.rooms.get(room).size === 0) {\n                this.rooms.delete(room);\n                this.emit(\"delete-room\", room);\n            }\n        }\n    }\n    /**\n     * Removes a socket from all rooms it's joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    delAll(id) {\n        if (!this.sids.has(id)) {\n            return;\n        }\n        for (const room of this.sids.get(id)) {\n            this._del(room, id);\n        }\n        this.sids.delete(id);\n    }\n    /**\n     * Broadcasts a packet.\n     *\n     * Options:\n     *  - `flags` {Object} flags for this packet\n     *  - `except` {Array} sids that should be excluded\n     *  - `rooms` {Array} list of rooms to broadcast to\n     *\n     * @param {Object} packet   the packet object\n     * @param {Object} opts     the options\n     * @public\n     */\n    broadcast(packet, opts) {\n        const rooms = opts.rooms;\n        const except = opts.except || new Set();\n        const flags = opts.flags || {};\n        const packetOpts = {\n            preEncoded: true,\n            volatile: flags.volatile,\n            compress: flags.compress\n        };\n        const ids = new Set();\n        packet.nsp = this.nsp.name;\n        const encodedPackets = this.encoder.encode(packet);\n        if (rooms.size) {\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (ids.has(id) || except.has(id))\n                        continue;\n                    const socket = this.nsp.sockets.get(id);\n                    if (socket) {\n                        socket.packet(encodedPackets, packetOpts);\n                        ids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (except.has(id))\n                    continue;\n                const socket = this.nsp.sockets.get(id);\n                if (socket)\n                    socket.packet(encodedPackets, packetOpts);\n            }\n        }\n    }\n    /**\n     * Gets a list of sockets by sid.\n     *\n     * @param {Set<Room>} rooms   the explicit set of rooms to check.\n     */\n    sockets(rooms) {\n        const sids = new Set();\n        if (rooms.size) {\n            for (const room of rooms) {\n                if (!this.rooms.has(room))\n                    continue;\n                for (const id of this.rooms.get(room)) {\n                    if (this.nsp.sockets.has(id)) {\n                        sids.add(id);\n                    }\n                }\n            }\n        }\n        else {\n            for (const [id] of this.sids) {\n                if (this.nsp.sockets.has(id))\n                    sids.add(id);\n            }\n        }\n        return Promise.resolve(sids);\n    }\n    /**\n     * Gets the list of rooms a given socket has joined.\n     *\n     * @param {SocketId} id   the socket id\n     */\n    socketRooms(id) {\n        return this.sids.get(id);\n    }\n}\nexports.Adapter = Adapter;\n"]},"metadata":{},"sourceType":"script"}