{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = exports.RESERVED_EVENTS = void 0;\n\nconst events_1 = require(\"events\");\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nconst url = require(\"url\");\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst base64id_1 = __importDefault(require(\"base64id\"));\n\nconst debug = debug_1.default(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\"connect\", \"connect_error\", \"disconnect\", \"disconnecting\", // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n\"newListener\", \"removeListener\"]);\n\nclass Socket extends events_1.EventEmitter {\n  /**\n   * Interface to a `Client` for a given `Namespace`.\n   *\n   * @param {Namespace} nsp\n   * @param {Client} client\n   * @param {Object} auth\n   * @package\n   */\n  constructor(nsp, client, auth) {\n    super();\n    this.nsp = nsp;\n    this.client = client;\n    this.acks = new Map();\n    this.fns = [];\n    this.flags = {};\n    this._rooms = new Set();\n    this.server = nsp.server;\n    this.adapter = this.nsp.adapter;\n\n    if (client.conn.protocol === 3) {\n      // @ts-ignore\n      this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n    } else {\n      this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n    }\n\n    this.connected = true;\n    this.disconnected = false;\n    this.handshake = this.buildHandshake(auth);\n  }\n  /**\n   * Builds the `handshake` BC object\n   *\n   * @private\n   */\n\n\n  buildHandshake(auth) {\n    return {\n      headers: this.request.headers,\n      time: new Date() + \"\",\n      address: this.conn.remoteAddress,\n      xdomain: !!this.request.headers.origin,\n      // @ts-ignore\n      secure: !!this.request.connection.encrypted,\n      issued: +new Date(),\n      url: this.request.url,\n      query: url.parse(this.request.url, true).query,\n      auth\n    };\n  }\n  /**\n   * Emits to this client.\n   *\n   * @return Always returns `true`.\n   * @public\n   */\n\n\n  emit(ev, ...args) {\n    if (exports.RESERVED_EVENTS.has(ev)) {\n      throw new Error(`\"${ev}\" is a reserved event name`);\n    }\n\n    args.unshift(ev);\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: args\n    }; // access last argument to see if it's an ACK callback\n\n    if (typeof args[args.length - 1] === \"function\") {\n      if (this._rooms.size || this.flags.broadcast) {\n        throw new Error(\"Callbacks are not supported when broadcasting\");\n      }\n\n      debug(\"emitting packet with ack id %d\", this.nsp._ids);\n      this.acks.set(this.nsp._ids, args.pop());\n      packet.id = this.nsp._ids++;\n    }\n\n    const rooms = new Set(this._rooms);\n    const flags = Object.assign({}, this.flags); // reset flags\n\n    this._rooms.clear();\n\n    this.flags = {};\n\n    if (rooms.size || flags.broadcast) {\n      this.adapter.broadcast(packet, {\n        except: new Set([this.id]),\n        rooms: rooms,\n        flags: flags\n      });\n    } else {\n      // dispatch packet\n      this.packet(packet, flags);\n    }\n\n    return true;\n  }\n  /**\n   * Targets a room when broadcasting.\n   *\n   * @param name\n   * @return self\n   * @public\n   */\n\n\n  to(name) {\n    this._rooms.add(name);\n\n    return this;\n  }\n  /**\n   * Targets a room when broadcasting.\n   *\n   * @param name\n   * @return self\n   * @public\n   */\n\n\n  in(name) {\n    this._rooms.add(name);\n\n    return this;\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * @return self\n   * @public\n   */\n\n\n  send(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * @return self\n   * @public\n   */\n\n\n  write(...args) {\n    this.emit(\"message\", ...args);\n    return this;\n  }\n  /**\n   * Writes a packet.\n   *\n   * @param {Object} packet - packet object\n   * @param {Object} opts - options\n   * @private\n   */\n\n\n  packet(packet, opts = {}) {\n    packet.nsp = this.nsp.name;\n    opts.compress = false !== opts.compress;\n\n    this.client._packet(packet, opts);\n  }\n  /**\n   * Joins a room.\n   *\n   * @param {String|Array} rooms - room or array of rooms\n   * @return a Promise or nothing, depending on the adapter\n   * @public\n   */\n\n\n  join(rooms) {\n    debug(\"join room %s\", rooms);\n    return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n  }\n  /**\n   * Leaves a room.\n   *\n   * @param {String} room\n   * @return a Promise or nothing, depending on the adapter\n   * @public\n   */\n\n\n  leave(room) {\n    debug(\"leave room %s\", room);\n    return this.adapter.del(this.id, room);\n  }\n  /**\n   * Leave all rooms.\n   *\n   * @private\n   */\n\n\n  leaveAll() {\n    this.adapter.delAll(this.id);\n  }\n  /**\n   * Called by `Namespace` upon successful\n   * middleware execution (ie: authorization).\n   * Socket is added to namespace array before\n   * call to join, so adapters can access it.\n   *\n   * @private\n   */\n\n\n  _onconnect() {\n    debug(\"socket connected - writing packet\");\n    this.join(this.id);\n\n    if (this.conn.protocol === 3) {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT\n      });\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT,\n        data: {\n          sid: this.id\n        }\n      });\n    }\n  }\n  /**\n   * Called with each packet. Called by `Client`.\n   *\n   * @param {Object} packet\n   * @private\n   */\n\n\n  _onpacket(packet) {\n    debug(\"got packet %j\", packet);\n\n    switch (packet.type) {\n      case socket_io_parser_1.PacketType.EVENT:\n        this.onevent(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.ACK:\n        this.onack(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n\n      case socket_io_parser_1.PacketType.CONNECT_ERROR:\n        this._onerror(new Error(packet.data));\n\n    }\n  }\n  /**\n   * Called upon event packet.\n   *\n   * @param {Object} packet - packet object\n   * @private\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n    debug(\"emitting event %j\", args);\n\n    if (null != packet.id) {\n      debug(\"attaching ack callback to event\");\n      args.push(this.ack(packet.id));\n    }\n\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    this.dispatch(args);\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @param {Number} id - packet id\n   * @private\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      const args = Array.prototype.slice.call(arguments);\n      debug(\"sending ack %j\", args);\n      self.packet({\n        id: id,\n        type: socket_io_parser_1.PacketType.ACK,\n        data: args\n      });\n      sent = true;\n    };\n  }\n  /**\n   * Called upon ack packet.\n   *\n   * @private\n   */\n\n\n  onack(packet) {\n    const ack = this.acks.get(packet.id);\n\n    if (\"function\" == typeof ack) {\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      ack.apply(this, packet.data);\n      this.acks.delete(packet.id);\n    } else {\n      debug(\"bad ack %s\", packet.id);\n    }\n  }\n  /**\n   * Called upon client disconnect packet.\n   *\n   * @private\n   */\n\n\n  ondisconnect() {\n    debug(\"got disconnect packet\");\n\n    this._onclose(\"client namespace disconnect\");\n  }\n  /**\n   * Handles a client error.\n   *\n   * @private\n   */\n\n\n  _onerror(err) {\n    if (this.listeners(\"error\").length) {\n      super.emit(\"error\", err);\n    } else {\n      console.error(\"Missing error handler on `socket`.\");\n      console.error(err.stack);\n    }\n  }\n  /**\n   * Called upon closing. Called by `Client`.\n   *\n   * @param {String} reason\n   * @throw {Error} optional error object\n   *\n   * @private\n   */\n\n\n  _onclose(reason) {\n    if (!this.connected) return this;\n    debug(\"closing socket - reason %s\", reason);\n    super.emit(\"disconnecting\", reason);\n    this.leaveAll();\n\n    this.nsp._remove(this);\n\n    this.client._remove(this);\n\n    this.connected = false;\n    this.disconnected = true;\n    super.emit(\"disconnect\", reason);\n    return;\n  }\n  /**\n   * Produces an `error` packet.\n   *\n   * @param {Object} err - error object\n   *\n   * @private\n   */\n\n\n  _error(err) {\n    this.packet({\n      type: socket_io_parser_1.PacketType.CONNECT_ERROR,\n      data: err\n    });\n  }\n  /**\n   * Disconnects this client.\n   *\n   * @param {Boolean} close - if `true`, closes the underlying connection\n   * @return {Socket} self\n   *\n   * @public\n   */\n\n\n  disconnect(close = false) {\n    if (!this.connected) return this;\n\n    if (close) {\n      this.client._disconnect();\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.DISCONNECT\n      });\n\n      this._onclose(\"server namespace disconnect\");\n    }\n\n    return this;\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @param {Boolean} compress - if `true`, compresses the sending data\n   * @return {Socket} self\n   * @public\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n   * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n   * and is in the middle of a request-response cycle).\n   *\n   * @return {Socket} self\n   * @public\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n   * sender.\n   *\n   * @return {Socket} self\n   * @public\n   */\n\n\n  get broadcast() {\n    this.flags.broadcast = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n   *\n   * @return {Socket} self\n   * @public\n   */\n\n\n  get local() {\n    this.flags.local = true;\n    return this;\n  }\n  /**\n   * Dispatch incoming event to socket listeners.\n   *\n   * @param {Array} event - event that will get emitted\n   * @private\n   */\n\n\n  dispatch(event) {\n    debug(\"dispatching an event %j\", event);\n    this.run(event, err => {\n      process.nextTick(() => {\n        if (err) {\n          return this._onerror(err);\n        }\n\n        super.emit.apply(this, event);\n      });\n    });\n  }\n  /**\n   * Sets up socket middleware.\n   *\n   * @param {Function} fn - middleware function (event, next)\n   * @return {Socket} self\n   * @public\n   */\n\n\n  use(fn) {\n    this.fns.push(fn);\n    return this;\n  }\n  /**\n   * Executes the middleware for an incoming event.\n   *\n   * @param {Array} event - event that will get emitted\n   * @param {Function} fn - last fn call in the middleware\n   * @private\n   */\n\n\n  run(event, fn) {\n    const fns = this.fns.slice(0);\n    if (!fns.length) return fn(null);\n\n    function run(i) {\n      fns[i](event, function (err) {\n        // upon error, short-circuit\n        if (err) return fn(err); // if no middleware left, summon callback\n\n        if (!fns[i + 1]) return fn(null); // go on to next\n\n        run(i + 1);\n      });\n    }\n\n    run(0);\n  }\n  /**\n   * A reference to the request that originated the underlying Engine.IO Socket.\n   *\n   * @public\n   */\n\n\n  get request() {\n    return this.client.request;\n  }\n  /**\n   * A reference to the underlying Client transport connection (Engine.IO Socket object).\n   *\n   * @public\n   */\n\n\n  get conn() {\n    return this.client.conn;\n  }\n  /**\n   * @public\n   */\n\n\n  get rooms() {\n    return this.adapter.socketRooms(this.id) || new Set();\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @param listener\n   * @public\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @param listener\n   * @public\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @param listener\n   * @public\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   *\n   * @public\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n\n}\n\nexports.Socket = Socket;","map":{"version":3,"sources":["D:/Documents/GitHub/karaoke/node_modules/socket.io/dist/socket.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","RESERVED_EVENTS","events_1","require","socket_io_parser_1","url","debug_1","base64id_1","debug","default","Set","EventEmitter","constructor","nsp","client","auth","acks","Map","fns","flags","_rooms","server","adapter","conn","protocol","id","name","generateId","connected","disconnected","handshake","buildHandshake","headers","request","time","Date","address","remoteAddress","xdomain","origin","secure","connection","encrypted","issued","query","parse","emit","ev","args","has","Error","unshift","packet","type","PacketType","EVENT","data","length","size","broadcast","_ids","set","pop","rooms","assign","clear","except","to","add","in","send","write","opts","compress","_packet","join","addAll","Array","isArray","leave","room","del","leaveAll","delAll","_onconnect","CONNECT","sid","_onpacket","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","_onerror","push","ack","_anyListeners","listeners","slice","listener","apply","dispatch","self","sent","prototype","call","arguments","get","delete","_onclose","err","console","error","stack","reason","_remove","_error","disconnect","close","_disconnect","volatile","local","event","run","process","nextTick","use","fn","i","socketRooms","onAny","prependAny","offAny","splice","listenersAny"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = exports.RESERVED_EVENTS = void 0;\nconst events_1 = require(\"events\");\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst url = require(\"url\");\nconst debug_1 = __importDefault(require(\"debug\"));\nconst base64id_1 = __importDefault(require(\"base64id\"));\nconst debug = debug_1.default(\"socket.io:socket\");\nexports.RESERVED_EVENTS = new Set([\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    \"newListener\",\n    \"removeListener\",\n]);\nclass Socket extends events_1.EventEmitter {\n    /**\n     * Interface to a `Client` for a given `Namespace`.\n     *\n     * @param {Namespace} nsp\n     * @param {Client} client\n     * @param {Object} auth\n     * @package\n     */\n    constructor(nsp, client, auth) {\n        super();\n        this.nsp = nsp;\n        this.client = client;\n        this.acks = new Map();\n        this.fns = [];\n        this.flags = {};\n        this._rooms = new Set();\n        this.server = nsp.server;\n        this.adapter = this.nsp.adapter;\n        if (client.conn.protocol === 3) {\n            // @ts-ignore\n            this.id = nsp.name !== \"/\" ? nsp.name + \"#\" + client.id : client.id;\n        }\n        else {\n            this.id = base64id_1.default.generateId(); // don't reuse the Engine.IO id because it's sensitive information\n        }\n        this.connected = true;\n        this.disconnected = false;\n        this.handshake = this.buildHandshake(auth);\n    }\n    /**\n     * Builds the `handshake` BC object\n     *\n     * @private\n     */\n    buildHandshake(auth) {\n        return {\n            headers: this.request.headers,\n            time: new Date() + \"\",\n            address: this.conn.remoteAddress,\n            xdomain: !!this.request.headers.origin,\n            // @ts-ignore\n            secure: !!this.request.connection.encrypted,\n            issued: +new Date(),\n            url: this.request.url,\n            query: url.parse(this.request.url, true).query,\n            auth,\n        };\n    }\n    /**\n     * Emits to this client.\n     *\n     * @return Always returns `true`.\n     * @public\n     */\n    emit(ev, ...args) {\n        if (exports.RESERVED_EVENTS.has(ev)) {\n            throw new Error(`\"${ev}\" is a reserved event name`);\n        }\n        args.unshift(ev);\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        // access last argument to see if it's an ACK callback\n        if (typeof args[args.length - 1] === \"function\") {\n            if (this._rooms.size || this.flags.broadcast) {\n                throw new Error(\"Callbacks are not supported when broadcasting\");\n            }\n            debug(\"emitting packet with ack id %d\", this.nsp._ids);\n            this.acks.set(this.nsp._ids, args.pop());\n            packet.id = this.nsp._ids++;\n        }\n        const rooms = new Set(this._rooms);\n        const flags = Object.assign({}, this.flags);\n        // reset flags\n        this._rooms.clear();\n        this.flags = {};\n        if (rooms.size || flags.broadcast) {\n            this.adapter.broadcast(packet, {\n                except: new Set([this.id]),\n                rooms: rooms,\n                flags: flags,\n            });\n        }\n        else {\n            // dispatch packet\n            this.packet(packet, flags);\n        }\n        return true;\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param name\n     * @return self\n     * @public\n     */\n    to(name) {\n        this._rooms.add(name);\n        return this;\n    }\n    /**\n     * Targets a room when broadcasting.\n     *\n     * @param name\n     * @return self\n     * @public\n     */\n    in(name) {\n        this._rooms.add(name);\n        return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    write(...args) {\n        this.emit(\"message\", ...args);\n        return this;\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param {Object} packet - packet object\n     * @param {Object} opts - options\n     * @private\n     */\n    packet(packet, opts = {}) {\n        packet.nsp = this.nsp.name;\n        opts.compress = false !== opts.compress;\n        this.client._packet(packet, opts);\n    }\n    /**\n     * Joins a room.\n     *\n     * @param {String|Array} rooms - room or array of rooms\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n    join(rooms) {\n        debug(\"join room %s\", rooms);\n        return this.adapter.addAll(this.id, new Set(Array.isArray(rooms) ? rooms : [rooms]));\n    }\n    /**\n     * Leaves a room.\n     *\n     * @param {String} room\n     * @return a Promise or nothing, depending on the adapter\n     * @public\n     */\n    leave(room) {\n        debug(\"leave room %s\", room);\n        return this.adapter.del(this.id, room);\n    }\n    /**\n     * Leave all rooms.\n     *\n     * @private\n     */\n    leaveAll() {\n        this.adapter.delAll(this.id);\n    }\n    /**\n     * Called by `Namespace` upon successful\n     * middleware execution (ie: authorization).\n     * Socket is added to namespace array before\n     * call to join, so adapters can access it.\n     *\n     * @private\n     */\n    _onconnect() {\n        debug(\"socket connected - writing packet\");\n        this.join(this.id);\n        if (this.conn.protocol === 3) {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT });\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: { sid: this.id } });\n        }\n    }\n    /**\n     * Called with each packet. Called by `Client`.\n     *\n     * @param {Object} packet\n     * @private\n     */\n    _onpacket(packet) {\n        debug(\"got packet %j\", packet);\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this._onerror(new Error(packet.data));\n        }\n    }\n    /**\n     * Called upon event packet.\n     *\n     * @param {Object} packet - packet object\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        this.dispatch(args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @param {Number} id - packet id\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function () {\n            // prevent double callbacks\n            if (sent)\n                return;\n            const args = Array.prototype.slice.call(arguments);\n            debug(\"sending ack %j\", args);\n            self.packet({\n                id: id,\n                type: socket_io_parser_1.PacketType.ACK,\n                data: args,\n            });\n            sent = true;\n        };\n    }\n    /**\n     * Called upon ack packet.\n     *\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks.get(packet.id);\n        if (\"function\" == typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            this.acks.delete(packet.id);\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon client disconnect packet.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"got disconnect packet\");\n        this._onclose(\"client namespace disconnect\");\n    }\n    /**\n     * Handles a client error.\n     *\n     * @private\n     */\n    _onerror(err) {\n        if (this.listeners(\"error\").length) {\n            super.emit(\"error\", err);\n        }\n        else {\n            console.error(\"Missing error handler on `socket`.\");\n            console.error(err.stack);\n        }\n    }\n    /**\n     * Called upon closing. Called by `Client`.\n     *\n     * @param {String} reason\n     * @throw {Error} optional error object\n     *\n     * @private\n     */\n    _onclose(reason) {\n        if (!this.connected)\n            return this;\n        debug(\"closing socket - reason %s\", reason);\n        super.emit(\"disconnecting\", reason);\n        this.leaveAll();\n        this.nsp._remove(this);\n        this.client._remove(this);\n        this.connected = false;\n        this.disconnected = true;\n        super.emit(\"disconnect\", reason);\n        return;\n    }\n    /**\n     * Produces an `error` packet.\n     *\n     * @param {Object} err - error object\n     *\n     * @private\n     */\n    _error(err) {\n        this.packet({ type: socket_io_parser_1.PacketType.CONNECT_ERROR, data: err });\n    }\n    /**\n     * Disconnects this client.\n     *\n     * @param {Boolean} close - if `true`, closes the underlying connection\n     * @return {Socket} self\n     *\n     * @public\n     */\n    disconnect(close = false) {\n        if (!this.connected)\n            return this;\n        if (close) {\n            this.client._disconnect();\n        }\n        else {\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n            this._onclose(\"server namespace disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param {Boolean} compress - if `true`, compresses the sending data\n     * @return {Socket} self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data may be lost if the client is not ready to\n     * receive messages (because of network slowness or other issues, or because they’re connected through long polling\n     * and is in the middle of a request-response cycle).\n     *\n     * @return {Socket} self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to every sockets but the\n     * sender.\n     *\n     * @return {Socket} self\n     * @public\n     */\n    get broadcast() {\n        this.flags.broadcast = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event data will only be broadcast to the current node.\n     *\n     * @return {Socket} self\n     * @public\n     */\n    get local() {\n        this.flags.local = true;\n        return this;\n    }\n    /**\n     * Dispatch incoming event to socket listeners.\n     *\n     * @param {Array} event - event that will get emitted\n     * @private\n     */\n    dispatch(event) {\n        debug(\"dispatching an event %j\", event);\n        this.run(event, (err) => {\n            process.nextTick(() => {\n                if (err) {\n                    return this._onerror(err);\n                }\n                super.emit.apply(this, event);\n            });\n        });\n    }\n    /**\n     * Sets up socket middleware.\n     *\n     * @param {Function} fn - middleware function (event, next)\n     * @return {Socket} self\n     * @public\n     */\n    use(fn) {\n        this.fns.push(fn);\n        return this;\n    }\n    /**\n     * Executes the middleware for an incoming event.\n     *\n     * @param {Array} event - event that will get emitted\n     * @param {Function} fn - last fn call in the middleware\n     * @private\n     */\n    run(event, fn) {\n        const fns = this.fns.slice(0);\n        if (!fns.length)\n            return fn(null);\n        function run(i) {\n            fns[i](event, function (err) {\n                // upon error, short-circuit\n                if (err)\n                    return fn(err);\n                // if no middleware left, summon callback\n                if (!fns[i + 1])\n                    return fn(null);\n                // go on to next\n                run(i + 1);\n            });\n        }\n        run(0);\n    }\n    /**\n     * A reference to the request that originated the underlying Engine.IO Socket.\n     *\n     * @public\n     */\n    get request() {\n        return this.client.request;\n    }\n    /**\n     * A reference to the underlying Client transport connection (Engine.IO Socket object).\n     *\n     * @public\n     */\n    get conn() {\n        return this.client.conn;\n    }\n    /**\n     * @public\n     */\n    get rooms() {\n        return this.adapter.socketRooms(this.id) || new Set();\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\nexports.Socket = Socket;\n"]},"metadata":{},"sourceType":"script"}