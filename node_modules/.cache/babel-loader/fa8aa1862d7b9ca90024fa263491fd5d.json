{"ast":null,"code":"const express = require('express');\n\nconst http = require('http');\n\nvar socketIo = require('socket.io');\n\nconst port = process.env.PORT || 4001;\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server); // const pool = require('./controllers/mongodbpool');\n// pool.connectToServer( function (err) {\n// const index = require(\"./routes/index.routes.js\")(io);\n// app.use('/', index);\n// });\n\nvar playerJson = {};\nio.on(\"connection\", socket => {\n  if (Object.keys(playerJson).length === 0) {\n    playerJson[socket] = \"Host\";\n  } else if (Object.keys(playerJson).length < 4) {\n    for (var i = 1; i < 4; i++) {\n      if (!(i in Object.values(playerJson))) {\n        playerJson[socket] = i;\n        socket.emit('user', playerJson[socket]);\n      }\n\n      break;\n    }\n  } else {\n    socket.disconnect();\n  }\n});\nio.on(\"disconnect\", socket => {\n  if (playerJson[socket] === \"Host\") {\n    Object.keys(playerJson).forEach(key => {\n      key.disconnect();\n    });\n    playerJson = {};\n  } else {\n    socket.disconnect();\n    delete playerJson[socket];\n  }\n});\nserver.listen(port, () => {\n  // Tell us what port it's running on\n  console.log(\"Karaoke server started on \" + port);\n});\nconst getApiAndEmit = \"TODO\";\nmodule.exports = app;","map":{"version":3,"sources":["D:/Documents/GitHub/karaoke/src/App.js"],"names":["express","require","http","socketIo","port","process","env","PORT","app","server","createServer","io","playerJson","on","socket","Object","keys","length","i","values","emit","disconnect","forEach","key","listen","console","log","getApiAndEmit","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAMG,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AAEA,MAAMC,GAAG,GAAGR,OAAO,EAAnB;AAEA,MAAMS,MAAM,GAAGP,IAAI,CAACQ,YAAL,CAAkBF,GAAlB,CAAf;AAEA,MAAMG,EAAE,GAAGR,QAAQ,CAACM,MAAD,CAAnB,C,CAGA;AACA;AACE;AACA;AACF;;AAEA,IAAIG,UAAU,GAAG,EAAjB;AAEAD,EAAE,CAACE,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAC9B,MAAIC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,MAAxB,KAAmC,CAAvC,EAA0C;AACxCL,IAAAA,UAAU,CAACE,MAAD,CAAV,GAAqB,MAArB;AACD,GAFD,MAGK,IAAIC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBK,MAAxB,GAAiC,CAArC,EAAwC;AAC3C,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAG,CAAlB,EAAqBA,CAAC,EAAtB,EAA0B;AACxB,UAAI,EAAEA,CAAC,IAAIH,MAAM,CAACI,MAAP,CAAcP,UAAd,CAAP,CAAJ,EAAuC;AACrCA,QAAAA,UAAU,CAACE,MAAD,CAAV,GAAqBI,CAArB;AACAJ,QAAAA,MAAM,CAACM,IAAP,CAAY,MAAZ,EAAoBR,UAAU,CAACE,MAAD,CAA9B;AACD;;AACD;AACD;AACF,GARI,MASA;AACHA,IAAAA,MAAM,CAACO,UAAP;AACD;AACF,CAhBD;AAkBAV,EAAE,CAACE,EAAH,CAAM,YAAN,EAAqBC,MAAD,IAAY;AAC9B,MAAIF,UAAU,CAACE,MAAD,CAAV,KAAuB,MAA3B,EAAmC;AACjCC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwBU,OAAxB,CAAiCC,GAAD,IAAS;AACvCA,MAAAA,GAAG,CAACF,UAAJ;AACD,KAFD;AAGAT,IAAAA,UAAU,GAAG,EAAb;AACD,GALD,MAMK;AACHE,IAAAA,MAAM,CAACO,UAAP;AACA,WAAOT,UAAU,CAACE,MAAD,CAAjB;AACD;AACF,CAXD;AAaAL,MAAM,CAACe,MAAP,CAAcpB,IAAd,EAAoB,MAAM;AACxB;AACAqB,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BtB,IAA3C;AACD,CAHD;AAKA,MAAMuB,aAAa,GAAG,MAAtB;AAEAC,MAAM,CAACC,OAAP,GAAiBrB,GAAjB","sourcesContent":["const express = require('express');\nconst http = require('http');\nvar socketIo = require('socket.io');\n\nconst port = process.env.PORT || 4001;\n\nconst app = express();\n\nconst server = http.createServer(app);\n\nconst io = socketIo(server);\n\n\n// const pool = require('./controllers/mongodbpool');\n// pool.connectToServer( function (err) {\n  // const index = require(\"./routes/index.routes.js\")(io);\n  // app.use('/', index);\n// });\n\nvar playerJson = {};\n\nio.on(\"connection\", (socket) => {\n  if (Object.keys(playerJson).length === 0) {\n    playerJson[socket] = \"Host\";\n  }\n  else if (Object.keys(playerJson).length < 4) {\n    for (var i=1; i < 4; i++) {\n      if (!(i in Object.values(playerJson))) {\n        playerJson[socket] = i;\n        socket.emit('user', playerJson[socket]);\n      }\n      break;\n    }\n  }\n  else {\n    socket.disconnect();\n  }\n})\n\nio.on(\"disconnect\", (socket) => {\n  if (playerJson[socket] === \"Host\") {\n    Object.keys(playerJson).forEach((key) => {\n      key.disconnect();\n    })\n    playerJson = {};\n  }\n  else {\n    socket.disconnect();\n    delete playerJson[socket];\n  }\n})\n\nserver.listen(port, () => {\n  // Tell us what port it's running on\n  console.log(\"Karaoke server started on \" + port)\n});\n\nconst getApiAndEmit = \"TODO\";\n\nmodule.exports = app;\n"]},"metadata":{},"sourceType":"module"}