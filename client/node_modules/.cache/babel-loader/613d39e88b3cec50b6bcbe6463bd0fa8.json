{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nimport pEvent from 'p-event';\nimport isIp from 'is-ip';\n\nconst getIp = async ({\n  isSecondTry = false\n} = {}) => {\n  try {\n    const peerConnection = new RTCPeerConnection({\n      iceServers: []\n    });\n    peerConnection.createDataChannel('');\n    peerConnection.createOffer(peerConnection.setLocalDescription.bind(peerConnection), () => {});\n    const {\n      candidate\n    } = await pEvent(peerConnection, 'icecandidate', {\n      timeout: 10000\n    });\n    peerConnection.close();\n\n    if (candidate && candidate.candidate) {\n      const result = candidate.candidate.split(' ')[4];\n\n      if (result.endsWith('.local')) {\n        if (isSecondTry) {\n          return;\n        }\n\n        const inputDevices = await navigator.mediaDevices.enumerateDevices();\n        const inputDeviceTypes = new Set(inputDevices.map(({\n          kind\n        }) => kind));\n        const constraints = {};\n\n        if (inputDeviceTypes.has('audioinput')) {\n          constraints.audio = true;\n        } else if (inputDeviceTypes.has('videoinput')) {\n          constraints.video = true;\n        } else {\n          return;\n        }\n\n        const mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n\n        for (const track of mediaStream.getTracks()) {\n          track.stop();\n        }\n\n        return await getIp({\n          isSecondTry: true\n        });\n      }\n\n      return result;\n    }\n  } catch {}\n};\n\nexport const v4 = async () => {\n  const result = await getIp();\n\n  if (isIp.v4(result)) {\n    return result;\n  }\n};\n\nv4.sync = () => undefined;\n\nexport const v6 = async () => {\n  const result = await getIp();\n\n  if (isIp.v6(result)) {\n    return result;\n  }\n};\n\nv6.sync = () => undefined;","map":{"version":3,"sources":["D:/Documents/GitHub/karaoke/client/node_modules/internal-ip/browser.js"],"names":["pEvent","isIp","getIp","isSecondTry","peerConnection","RTCPeerConnection","iceServers","createDataChannel","createOffer","setLocalDescription","bind","candidate","timeout","close","result","split","endsWith","inputDevices","navigator","mediaDevices","enumerateDevices","inputDeviceTypes","Set","map","kind","constraints","has","audio","video","mediaStream","getUserMedia","track","getTracks","stop","v4","sync","undefined","v6"],"mappings":"AAAA;AACA;;AACA,OAAOA,MAAP,MAAmB,SAAnB;AACA,OAAOC,IAAP,MAAiB,OAAjB;;AAEA,MAAMC,KAAK,GAAG,OAAO;AAACC,EAAAA,WAAW,GAAG;AAAf,IAAwB,EAA/B,KAAsC;AACnD,MAAI;AACH,UAAMC,cAAc,GAAG,IAAIC,iBAAJ,CAAsB;AAACC,MAAAA,UAAU,EAAE;AAAb,KAAtB,CAAvB;AAEAF,IAAAA,cAAc,CAACG,iBAAf,CAAiC,EAAjC;AACAH,IAAAA,cAAc,CAACI,WAAf,CAA2BJ,cAAc,CAACK,mBAAf,CAAmCC,IAAnC,CAAwCN,cAAxC,CAA3B,EAAoF,MAAM,CAAE,CAA5F;AAEA,UAAM;AAACO,MAAAA;AAAD,QAAc,MAAMX,MAAM,CAACI,cAAD,EAAiB,cAAjB,EAAiC;AAChEQ,MAAAA,OAAO,EAAE;AADuD,KAAjC,CAAhC;AAIAR,IAAAA,cAAc,CAACS,KAAf;;AAEA,QAAIF,SAAS,IAAIA,SAAS,CAACA,SAA3B,EAAsC;AACrC,YAAMG,MAAM,GAAGH,SAAS,CAACA,SAAV,CAAoBI,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,CAAf;;AACA,UAAID,MAAM,CAACE,QAAP,CAAgB,QAAhB,CAAJ,EAA+B;AAC9B,YAAIb,WAAJ,EAAiB;AAChB;AACA;;AAED,cAAMc,YAAY,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,gBAAvB,EAA3B;AACA,cAAMC,gBAAgB,GAAG,IAAIC,GAAJ,CAAQL,YAAY,CAACM,GAAb,CAAiB,CAAC;AAACC,UAAAA;AAAD,SAAD,KAAYA,IAA7B,CAAR,CAAzB;AAEA,cAAMC,WAAW,GAAG,EAApB;;AAEA,YAAIJ,gBAAgB,CAACK,GAAjB,CAAqB,YAArB,CAAJ,EAAwC;AACvCD,UAAAA,WAAW,CAACE,KAAZ,GAAoB,IAApB;AACA,SAFD,MAEO,IAAIN,gBAAgB,CAACK,GAAjB,CAAqB,YAArB,CAAJ,EAAwC;AAC9CD,UAAAA,WAAW,CAACG,KAAZ,GAAoB,IAApB;AACA,SAFM,MAEA;AACN;AACA;;AAED,cAAMC,WAAW,GAAG,MAAMX,SAAS,CAACC,YAAV,CAAuBW,YAAvB,CAAoCL,WAApC,CAA1B;;AACA,aAAK,MAAMM,KAAX,IAAoBF,WAAW,CAACG,SAAZ,EAApB,EAA6C;AAC5CD,UAAAA,KAAK,CAACE,IAAN;AACA;;AAED,eAAO,MAAM/B,KAAK,CAAC;AAACC,UAAAA,WAAW,EAAE;AAAd,SAAD,CAAlB;AACA;;AAED,aAAOW,MAAP;AACA;AACD,GA1CD,CA0CE,MAAM,CAAE;AACV,CA5CD;;AA8CA,OAAO,MAAMoB,EAAE,GAAG,YAAY;AAC7B,QAAMpB,MAAM,GAAG,MAAMZ,KAAK,EAA1B;;AACA,MAAID,IAAI,CAACiC,EAAL,CAAQpB,MAAR,CAAJ,EAAqB;AACpB,WAAOA,MAAP;AACA;AACD,CALM;;AAOPoB,EAAE,CAACC,IAAH,GAAU,MAAMC,SAAhB;;AAEA,OAAO,MAAMC,EAAE,GAAG,YAAY;AAC7B,QAAMvB,MAAM,GAAG,MAAMZ,KAAK,EAA1B;;AACA,MAAID,IAAI,CAACoC,EAAL,CAAQvB,MAAR,CAAJ,EAAqB;AACpB,WAAOA,MAAP;AACA;AACD,CALM;;AAOPuB,EAAE,CAACF,IAAH,GAAU,MAAMC,SAAhB","sourcesContent":["/* eslint-env browser */\n'use strict';\nimport pEvent from 'p-event';\nimport isIp from 'is-ip';\n\nconst getIp = async ({isSecondTry = false} = {}) => {\n\ttry {\n\t\tconst peerConnection = new RTCPeerConnection({iceServers: []});\n\n\t\tpeerConnection.createDataChannel('');\n\t\tpeerConnection.createOffer(peerConnection.setLocalDescription.bind(peerConnection), () => {});\n\n\t\tconst {candidate} = await pEvent(peerConnection, 'icecandidate', {\n\t\t\ttimeout: 10000\n\t\t});\n\n\t\tpeerConnection.close();\n\n\t\tif (candidate && candidate.candidate) {\n\t\t\tconst result = candidate.candidate.split(' ')[4];\n\t\t\tif (result.endsWith('.local')) {\n\t\t\t\tif (isSecondTry) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst inputDevices = await navigator.mediaDevices.enumerateDevices();\n\t\t\t\tconst inputDeviceTypes = new Set(inputDevices.map(({kind}) => kind));\n\n\t\t\t\tconst constraints = {};\n\n\t\t\t\tif (inputDeviceTypes.has('audioinput')) {\n\t\t\t\t\tconstraints.audio = true;\n\t\t\t\t} else if (inputDeviceTypes.has('videoinput')) {\n\t\t\t\t\tconstraints.video = true;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\t\t\tfor (const track of mediaStream.getTracks()) {\n\t\t\t\t\ttrack.stop();\n\t\t\t\t}\n\n\t\t\t\treturn await getIp({isSecondTry: true});\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\t} catch {}\n};\n\nexport const v4 = async () => {\n\tconst result = await getIp();\n\tif (isIp.v4(result)) {\n\t\treturn result;\n\t}\n};\n\nv4.sync = () => undefined;\n\nexport const v6 = async () => {\n\tconst result = await getIp();\n\tif (isIp.v6(result)) {\n\t\treturn result;\n\t}\n};\n\nv6.sync = () => undefined;\n"]},"metadata":{},"sourceType":"module"}